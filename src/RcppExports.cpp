// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// CAR_ALASSO_hir_Cpp
List CAR_ALASSO_hir_Cpp(const arma::mat& data, const arma::mat& design, const int link, const int n_iter, const int n_burn_in, const int thin_by, const arma::mat r_beta, const arma::mat delta_beta, const arma::vec r_Omega, const arma::vec delta_Omega, const arma::vec& lambda_diag, int ns, int m, int emax, bool progress);
RcppExport SEXP _CARlasso_CAR_ALASSO_hir_Cpp(SEXP dataSEXP, SEXP designSEXP, SEXP linkSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP r_betaSEXP, SEXP delta_betaSEXP, SEXP r_OmegaSEXP, SEXP delta_OmegaSEXP, SEXP lambda_diagSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type delta_beta(delta_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type r_Omega(r_OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type delta_Omega(delta_OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_diag(lambda_diagSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type emax(emaxSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(CAR_ALASSO_hir_Cpp(data, design, link, n_iter, n_burn_in, thin_by, r_beta, delta_beta, r_Omega, delta_Omega, lambda_diag, ns, m, emax, progress));
    return rcpp_result_gen;
END_RCPP
}
// CAR_ALASSO_Cpp
List CAR_ALASSO_Cpp(const arma::mat& data, const arma::mat& design, const int n_iter, const int n_burn_in, const int thin_by, const arma::mat r_beta, const arma::mat delta_beta, const arma::vec r_Omega, const arma::vec delta_Omega, const arma::vec& lambda_diag, bool progress);
RcppExport SEXP _CARlasso_CAR_ALASSO_Cpp(SEXP dataSEXP, SEXP designSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP r_betaSEXP, SEXP delta_betaSEXP, SEXP r_OmegaSEXP, SEXP delta_OmegaSEXP, SEXP lambda_diagSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type delta_beta(delta_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type r_Omega(r_OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type delta_Omega(delta_OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_diag(lambda_diagSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(CAR_ALASSO_Cpp(data, design, n_iter, n_burn_in, thin_by, r_beta, delta_beta, r_Omega, delta_Omega, lambda_diag, progress));
    return rcpp_result_gen;
END_RCPP
}
// CAR_LASSO_hir_Cpp
List CAR_LASSO_hir_Cpp(const arma::mat& data, const arma::mat& design, const int link, const int n_iter, const int n_burn_in, const int thin_by, const double r_beta, const double delta_beta, const double r_Omega, const double delta_Omega, int ns, int m, int emax, bool progress);
RcppExport SEXP _CARlasso_CAR_LASSO_hir_Cpp(SEXP dataSEXP, SEXP designSEXP, SEXP linkSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP r_betaSEXP, SEXP delta_betaSEXP, SEXP r_OmegaSEXP, SEXP delta_OmegaSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const double >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_beta(delta_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type r_Omega(r_OmegaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_Omega(delta_OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type emax(emaxSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(CAR_LASSO_hir_Cpp(data, design, link, n_iter, n_burn_in, thin_by, r_beta, delta_beta, r_Omega, delta_Omega, ns, m, emax, progress));
    return rcpp_result_gen;
END_RCPP
}
// CAR_LASSO_Cpp
List CAR_LASSO_Cpp(const arma::mat& data, const arma::mat& design, const int n_iter, const int n_burn_in, const int thin_by, const double r_beta, const double delta_beta, const double r_Omega, const double delta_Omega, bool progress);
RcppExport SEXP _CARlasso_CAR_LASSO_Cpp(SEXP dataSEXP, SEXP designSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP r_betaSEXP, SEXP delta_betaSEXP, SEXP r_OmegaSEXP, SEXP delta_OmegaSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const double >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_beta(delta_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type r_Omega(r_OmegaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_Omega(delta_OmegaSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(CAR_LASSO_Cpp(data, design, n_iter, n_burn_in, thin_by, r_beta, delta_beta, r_Omega, delta_Omega, progress));
    return rcpp_result_gen;
END_RCPP
}
// update_car_tau2_adp_helper
arma::vec update_car_tau2_adp_helper(const arma::mat& beta, const arma::vec& lambda2, const arma::mat& Omega, int k, int p, int n);
RcppExport SEXP _CARlasso_update_car_tau2_adp_helper(SEXP betaSEXP, SEXP lambda2SEXP, SEXP OmegaSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_car_tau2_adp_helper(beta, lambda2, Omega, k, p, n));
    return rcpp_result_gen;
END_RCPP
}
// update_car_lambda_Omega_adp_helper
void update_car_lambda_Omega_adp_helper(arma::vec& lambda_curr, const arma::mat& Omega, const arma::vec& r, const arma::vec& delta);
RcppExport SEXP _CARlasso_update_car_lambda_Omega_adp_helper(SEXP lambda_currSEXP, SEXP OmegaSEXP, SEXP rSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_curr(lambda_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    update_car_lambda_Omega_adp_helper(lambda_curr, Omega, r, delta);
    return R_NilValue;
END_RCPP
}
// update_car_beta_helper
arma::mat update_car_beta_helper(const arma::mat& data, const arma::mat& design, const arma::vec& mu, const arma::vec& tau2, const arma::mat& Omega, int k, int p, int n);
RcppExport SEXP _CARlasso_update_car_beta_helper(SEXP dataSEXP, SEXP designSEXP, SEXP muSEXP, SEXP tau2SEXP, SEXP OmegaSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_car_beta_helper(data, design, mu, tau2, Omega, k, p, n));
    return rcpp_result_gen;
END_RCPP
}
// update_car_mu_helper
arma::vec update_car_mu_helper(const arma::mat& data, const arma::mat& design, const arma::mat& beta, const arma::mat& Omega, int k, int p, int n);
RcppExport SEXP _CARlasso_update_car_mu_helper(SEXP dataSEXP, SEXP designSEXP, SEXP betaSEXP, SEXP OmegaSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_car_mu_helper(data, design, beta, Omega, k, p, n));
    return rcpp_result_gen;
END_RCPP
}
// update_car_Omega_helper
void update_car_Omega_helper(arma::mat& Omega, const arma::mat& data, const arma::mat& design, const arma::vec& mu, const arma::mat& beta, const double& lambda_curr, int k, int p, int n);
RcppExport SEXP _CARlasso_update_car_Omega_helper(SEXP OmegaSEXP, SEXP dataSEXP, SEXP designSEXP, SEXP muSEXP, SEXP betaSEXP, SEXP lambda_currSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_curr(lambda_currSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    update_car_Omega_helper(Omega, data, design, mu, beta, lambda_curr, k, p, n);
    return R_NilValue;
END_RCPP
}
// update_car_tau2_helper
arma::vec update_car_tau2_helper(const arma::mat& beta, const double& lambda2, const arma::mat& Omega, int k, int p, int n);
RcppExport SEXP _CARlasso_update_car_tau2_helper(SEXP betaSEXP, SEXP lambda2SEXP, SEXP OmegaSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_car_tau2_helper(beta, lambda2, Omega, k, p, n));
    return rcpp_result_gen;
END_RCPP
}
// sample_Omega_prior_cpp
Rcpp::List sample_Omega_prior_cpp(int k, const int n_iter, const int n_burn_in, const int thin_by, const double lambda_a, const double lambda_b, bool progress);
RcppExport SEXP _CARlasso_sample_Omega_prior_cpp(SEXP kSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP lambda_aSEXP, SEXP lambda_bSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_a(lambda_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_b(lambda_bSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_Omega_prior_cpp(k, n_iter, n_burn_in, thin_by, lambda_a, lambda_b, progress));
    return rcpp_result_gen;
END_RCPP
}
// rgig
double rgig(double lambda, double chi, double psi);
RcppExport SEXP _CARlasso_rgig(SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(rgig(lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// update_Z_helper_CAR
void update_Z_helper_CAR(arma::mat& Z_curr, const arma::mat& data, const arma::mat& design, const arma::vec& mu_curr, const arma::mat& beta_curr, const arma::mat& Omega_curr, int k, int p, int n);
RcppExport SEXP _CARlasso_update_Z_helper_CAR(SEXP Z_currSEXP, SEXP dataSEXP, SEXP designSEXP, SEXP mu_currSEXP, SEXP beta_currSEXP, SEXP Omega_currSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Z_curr(Z_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_curr(mu_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_curr(beta_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_curr(Omega_currSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    update_Z_helper_CAR(Z_curr, data, design, mu_curr, beta_curr, Omega_curr, k, p, n);
    return R_NilValue;
END_RCPP
}
// rtn1
double rtn1(const double mean, const double sd, const double low, const double high);
RcppExport SEXP _CARlasso_rtn1(SEXP meanSEXP, SEXP sdSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< const double >::type high(highSEXP);
    rcpp_result_gen = Rcpp::wrap(rtn1(mean, sd, low, high));
    return rcpp_result_gen;
END_RCPP
}
// update_Z_helper_multinomial
void update_Z_helper_multinomial(arma::mat& Z_curr, const arma::mat& mu_Z, const arma::mat& Sigma_Z, const arma::mat& y, int k, int p, int n, int ns, int m, double emax);
RcppExport SEXP _CARlasso_update_Z_helper_multinomial(SEXP Z_currSEXP, SEXP mu_ZSEXP, SEXP Sigma_ZSEXP, SEXP ySEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Z_curr(Z_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_Z(mu_ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_Z(Sigma_ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type emax(emaxSEXP);
    update_Z_helper_multinomial(Z_curr, mu_Z, Sigma_Z, y, k, p, n, ns, m, emax);
    return R_NilValue;
END_RCPP
}
// update_Z_helper_Pois
void update_Z_helper_Pois(arma::mat& Z_curr, const arma::mat& mu_Z, const arma::mat& Sigma_Z, const arma::mat& y, int k, int p, int n, int ns, int m, double emax);
RcppExport SEXP _CARlasso_update_Z_helper_Pois(SEXP Z_currSEXP, SEXP mu_ZSEXP, SEXP Sigma_ZSEXP, SEXP ySEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Z_curr(Z_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_Z(mu_ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_Z(Sigma_ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type emax(emaxSEXP);
    update_Z_helper_Pois(Z_curr, mu_Z, Sigma_Z, y, k, p, n, ns, m, emax);
    return R_NilValue;
END_RCPP
}
// update_Z_helper_Pois_reg
void update_Z_helper_Pois_reg(arma::mat& Z_curr, const arma::mat& data, const arma::mat& design, const arma::vec& mu_curr, const arma::mat& beta_curr, const arma::mat& Omega_curr, int k, int p, int n, int ns, int m, double emax);
RcppExport SEXP _CARlasso_update_Z_helper_Pois_reg(SEXP Z_currSEXP, SEXP dataSEXP, SEXP designSEXP, SEXP mu_currSEXP, SEXP beta_currSEXP, SEXP Omega_currSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Z_curr(Z_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_curr(mu_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_curr(beta_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_curr(Omega_currSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type emax(emaxSEXP);
    update_Z_helper_Pois_reg(Z_curr, data, design, mu_curr, beta_curr, Omega_curr, k, p, n, ns, m, emax);
    return R_NilValue;
END_RCPP
}
// Intercept_Graphical_ALASSO_Cpp
Rcpp::List Intercept_Graphical_ALASSO_Cpp(const arma::mat& data, const int n_iter, const int n_burn_in, const int thin_by, const arma::vec& lambda_a, const arma::vec& lambda_b, const arma::vec& lambda_diag, bool progress);
RcppExport SEXP _CARlasso_Intercept_Graphical_ALASSO_Cpp(SEXP dataSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP lambda_aSEXP, SEXP lambda_bSEXP, SEXP lambda_diagSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_a(lambda_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_b(lambda_bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_diag(lambda_diagSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(Intercept_Graphical_ALASSO_Cpp(data, n_iter, n_burn_in, thin_by, lambda_a, lambda_b, lambda_diag, progress));
    return rcpp_result_gen;
END_RCPP
}
// Intercept_Graphical_ALASSO_hir_Cpp
Rcpp::List Intercept_Graphical_ALASSO_hir_Cpp(const arma::mat& data, const int link, const int n_iter, const int n_burn_in, const int thin_by, const arma::vec& lambda_a, const arma::vec& lambda_b, const arma::vec& lambda_diag, int ns, int m, int emax, bool progress);
RcppExport SEXP _CARlasso_Intercept_Graphical_ALASSO_hir_Cpp(SEXP dataSEXP, SEXP linkSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP lambda_aSEXP, SEXP lambda_bSEXP, SEXP lambda_diagSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_a(lambda_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_b(lambda_bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_diag(lambda_diagSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type emax(emaxSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(Intercept_Graphical_ALASSO_hir_Cpp(data, link, n_iter, n_burn_in, thin_by, lambda_a, lambda_b, lambda_diag, ns, m, emax, progress));
    return rcpp_result_gen;
END_RCPP
}
// Intercept_Graphical_LASSO_Cpp
Rcpp::List Intercept_Graphical_LASSO_Cpp(const arma::mat& data, const int n_iter, const int n_burn_in, const int thin_by, const double lambda_a, const double lambda_b, bool progress);
RcppExport SEXP _CARlasso_Intercept_Graphical_LASSO_Cpp(SEXP dataSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP lambda_aSEXP, SEXP lambda_bSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_a(lambda_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_b(lambda_bSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(Intercept_Graphical_LASSO_Cpp(data, n_iter, n_burn_in, thin_by, lambda_a, lambda_b, progress));
    return rcpp_result_gen;
END_RCPP
}
// Intercept_Graphical_LASSO_hir_Cpp
Rcpp::List Intercept_Graphical_LASSO_hir_Cpp(const arma::mat& data, const int link, const int n_iter, const int n_burn_in, const int thin_by, const double lambda_a, const double lambda_b, int ns, int m, int emax, bool progress);
RcppExport SEXP _CARlasso_Intercept_Graphical_LASSO_hir_Cpp(SEXP dataSEXP, SEXP linkSEXP, SEXP n_iterSEXP, SEXP n_burn_inSEXP, SEXP thin_bySEXP, SEXP lambda_aSEXP, SEXP lambda_bSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_a(lambda_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_b(lambda_bSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type emax(emaxSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(Intercept_Graphical_LASSO_hir_Cpp(data, link, n_iter, n_burn_in, thin_by, lambda_a, lambda_b, ns, m, emax, progress));
    return rcpp_result_gen;
END_RCPP
}
// rinvGau
double rinvGau(double mu, double lambda);
RcppExport SEXP _CARlasso_rinvGau(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvGau(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// stein_loss_cpp
double stein_loss_cpp(const arma::mat& Omega, const arma::mat& Omega_hat);
RcppExport SEXP _CARlasso_stein_loss_cpp(SEXP OmegaSEXP, SEXP Omega_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_hat(Omega_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(stein_loss_cpp(Omega, Omega_hat));
    return rcpp_result_gen;
END_RCPP
}
// CAR_multireg_cpp
List CAR_multireg_cpp(const arma::mat& data, const arma::mat& design, int n_sample, const arma::mat& Bbar, const arma::mat& A, double nu, const arma::mat& V);
RcppExport SEXP _CARlasso_CAR_multireg_cpp(SEXP dataSEXP, SEXP designSEXP, SEXP n_sampleSEXP, SEXP BbarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bbar(BbarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(CAR_multireg_cpp(data, design, n_sample, Bbar, A, nu, V));
    return rcpp_result_gen;
END_RCPP
}
// Multinomial_CAR_multireg_cpp
List Multinomial_CAR_multireg_cpp(const arma::mat& data, const arma::mat& design, int n_burn_in, int n_iter, int thin_by, const arma::mat& Bbar, const arma::mat& A, double nu, const arma::mat& V, int ns, int m, double emax);
RcppExport SEXP _CARlasso_Multinomial_CAR_multireg_cpp(SEXP dataSEXP, SEXP designSEXP, SEXP n_burn_inSEXP, SEXP n_iterSEXP, SEXP thin_bySEXP, SEXP BbarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP VSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bbar(BbarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type emax(emaxSEXP);
    rcpp_result_gen = Rcpp::wrap(Multinomial_CAR_multireg_cpp(data, design, n_burn_in, n_iter, thin_by, Bbar, A, nu, V, ns, m, emax));
    return rcpp_result_gen;
END_RCPP
}
// Pois_CAR_multireg_cpp
List Pois_CAR_multireg_cpp(const arma::mat& data, const arma::mat& design, int n_burn_in, int n_iter, int thin_by, const arma::mat& Bbar, const arma::mat& A, double nu, const arma::mat& V, int ns, int m, double emax);
RcppExport SEXP _CARlasso_Pois_CAR_multireg_cpp(SEXP dataSEXP, SEXP designSEXP, SEXP n_burn_inSEXP, SEXP n_iterSEXP, SEXP thin_bySEXP, SEXP BbarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP VSEXP, SEXP nsSEXP, SEXP mSEXP, SEXP emaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bbar(BbarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type emax(emaxSEXP);
    rcpp_result_gen = Rcpp::wrap(Pois_CAR_multireg_cpp(data, design, n_burn_in, n_iter, thin_by, Bbar, A, nu, V, ns, m, emax));
    return rcpp_result_gen;
END_RCPP
}
// Probit_CAR_multireg_cpp
List Probit_CAR_multireg_cpp(const arma::mat& data, const arma::mat& design, int n_burn_in, int n_iter, int thin_by, const arma::mat& Bbar, const arma::mat& A, double nu, const arma::mat& V);
RcppExport SEXP _CARlasso_Probit_CAR_multireg_cpp(SEXP dataSEXP, SEXP designSEXP, SEXP n_burn_inSEXP, SEXP n_iterSEXP, SEXP thin_bySEXP, SEXP BbarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type thin_by(thin_bySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Bbar(BbarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(Probit_CAR_multireg_cpp(data, design, n_burn_in, n_iter, thin_by, Bbar, A, nu, V));
    return rcpp_result_gen;
END_RCPP
}
// rCARAlasso_
void rCARAlasso_(const arma::mat& Z_curr, const arma::mat& design, arma::vec& lambda2_beta, arma::vec& tau2_curr, arma::mat& beta_curr, arma::vec& lambda_Omega, arma::mat& Omega_curr, arma::vec& mu_curr, const arma::mat& r_beta, const arma::mat& delta_beta, const arma::vec& r_Omega, const arma::vec& delta_Omega, const arma::vec& lambda_diag, int k, int p, int n);
RcppExport SEXP _CARlasso_rCARAlasso_(SEXP Z_currSEXP, SEXP designSEXP, SEXP lambda2_betaSEXP, SEXP tau2_currSEXP, SEXP beta_currSEXP, SEXP lambda_OmegaSEXP, SEXP Omega_currSEXP, SEXP mu_currSEXP, SEXP r_betaSEXP, SEXP delta_betaSEXP, SEXP r_OmegaSEXP, SEXP delta_OmegaSEXP, SEXP lambda_diagSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_curr(Z_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda2_beta(lambda2_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau2_curr(tau2_currSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_curr(beta_currSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_Omega(lambda_OmegaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Omega_curr(Omega_currSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu_curr(mu_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type delta_beta(delta_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r_Omega(r_OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta_Omega(delta_OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_diag(lambda_diagSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rCARAlasso_(Z_curr, design, lambda2_beta, tau2_curr, beta_curr, lambda_Omega, Omega_curr, mu_curr, r_beta, delta_beta, r_Omega, delta_Omega, lambda_diag, k, p, n);
    return R_NilValue;
END_RCPP
}
// rCARlasso_
void rCARlasso_(const arma::mat& Z_curr, const arma::mat& design, double& lambda2_beta, arma::vec& tau2_curr, arma::mat& beta_curr, double& lambda_Omega, arma::mat& Omega_curr, arma::vec& mu_curr, const double r_beta, const double delta_beta, const double r_Omega, const double delta_Omega, int k, int p, int n);
RcppExport SEXP _CARlasso_rCARlasso_(SEXP Z_currSEXP, SEXP designSEXP, SEXP lambda2_betaSEXP, SEXP tau2_currSEXP, SEXP beta_currSEXP, SEXP lambda_OmegaSEXP, SEXP Omega_currSEXP, SEXP mu_currSEXP, SEXP r_betaSEXP, SEXP delta_betaSEXP, SEXP r_OmegaSEXP, SEXP delta_OmegaSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_curr(Z_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< double& >::type lambda2_beta(lambda2_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau2_curr(tau2_currSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_curr(beta_currSEXP);
    Rcpp::traits::input_parameter< double& >::type lambda_Omega(lambda_OmegaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Omega_curr(Omega_currSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu_curr(mu_currSEXP);
    Rcpp::traits::input_parameter< const double >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_beta(delta_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type r_Omega(r_OmegaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_Omega(delta_OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rCARlasso_(Z_curr, design, lambda2_beta, tau2_curr, beta_curr, lambda_Omega, Omega_curr, mu_curr, r_beta, delta_beta, r_Omega, delta_Omega, k, p, n);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CARlasso_CAR_ALASSO_hir_Cpp", (DL_FUNC) &_CARlasso_CAR_ALASSO_hir_Cpp, 15},
    {"_CARlasso_CAR_ALASSO_Cpp", (DL_FUNC) &_CARlasso_CAR_ALASSO_Cpp, 11},
    {"_CARlasso_CAR_LASSO_hir_Cpp", (DL_FUNC) &_CARlasso_CAR_LASSO_hir_Cpp, 14},
    {"_CARlasso_CAR_LASSO_Cpp", (DL_FUNC) &_CARlasso_CAR_LASSO_Cpp, 10},
    {"_CARlasso_update_car_tau2_adp_helper", (DL_FUNC) &_CARlasso_update_car_tau2_adp_helper, 6},
    {"_CARlasso_update_car_lambda_Omega_adp_helper", (DL_FUNC) &_CARlasso_update_car_lambda_Omega_adp_helper, 4},
    {"_CARlasso_update_car_beta_helper", (DL_FUNC) &_CARlasso_update_car_beta_helper, 8},
    {"_CARlasso_update_car_mu_helper", (DL_FUNC) &_CARlasso_update_car_mu_helper, 7},
    {"_CARlasso_update_car_Omega_helper", (DL_FUNC) &_CARlasso_update_car_Omega_helper, 9},
    {"_CARlasso_update_car_tau2_helper", (DL_FUNC) &_CARlasso_update_car_tau2_helper, 6},
    {"_CARlasso_sample_Omega_prior_cpp", (DL_FUNC) &_CARlasso_sample_Omega_prior_cpp, 7},
    {"_CARlasso_rgig", (DL_FUNC) &_CARlasso_rgig, 3},
    {"_CARlasso_update_Z_helper_CAR", (DL_FUNC) &_CARlasso_update_Z_helper_CAR, 9},
    {"_CARlasso_rtn1", (DL_FUNC) &_CARlasso_rtn1, 4},
    {"_CARlasso_update_Z_helper_multinomial", (DL_FUNC) &_CARlasso_update_Z_helper_multinomial, 10},
    {"_CARlasso_update_Z_helper_Pois", (DL_FUNC) &_CARlasso_update_Z_helper_Pois, 10},
    {"_CARlasso_update_Z_helper_Pois_reg", (DL_FUNC) &_CARlasso_update_Z_helper_Pois_reg, 12},
    {"_CARlasso_Intercept_Graphical_ALASSO_Cpp", (DL_FUNC) &_CARlasso_Intercept_Graphical_ALASSO_Cpp, 8},
    {"_CARlasso_Intercept_Graphical_ALASSO_hir_Cpp", (DL_FUNC) &_CARlasso_Intercept_Graphical_ALASSO_hir_Cpp, 12},
    {"_CARlasso_Intercept_Graphical_LASSO_Cpp", (DL_FUNC) &_CARlasso_Intercept_Graphical_LASSO_Cpp, 7},
    {"_CARlasso_Intercept_Graphical_LASSO_hir_Cpp", (DL_FUNC) &_CARlasso_Intercept_Graphical_LASSO_hir_Cpp, 11},
    {"_CARlasso_rinvGau", (DL_FUNC) &_CARlasso_rinvGau, 2},
    {"_CARlasso_stein_loss_cpp", (DL_FUNC) &_CARlasso_stein_loss_cpp, 2},
    {"_CARlasso_CAR_multireg_cpp", (DL_FUNC) &_CARlasso_CAR_multireg_cpp, 7},
    {"_CARlasso_Multinomial_CAR_multireg_cpp", (DL_FUNC) &_CARlasso_Multinomial_CAR_multireg_cpp, 12},
    {"_CARlasso_Pois_CAR_multireg_cpp", (DL_FUNC) &_CARlasso_Pois_CAR_multireg_cpp, 12},
    {"_CARlasso_Probit_CAR_multireg_cpp", (DL_FUNC) &_CARlasso_Probit_CAR_multireg_cpp, 9},
    {"_CARlasso_rCARAlasso_", (DL_FUNC) &_CARlasso_rCARAlasso_, 16},
    {"_CARlasso_rCARlasso_", (DL_FUNC) &_CARlasso_rCARlasso_, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_CARlasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
